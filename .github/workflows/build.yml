name: Build

on:
  push:
  release:
    # Note that edited doesn't trigger when the prerelease flag is changed.
    # You also have to change the description slightly, if you want to change a
    # prerelease to a release.
    types: [ published, edited ]
  workflow_dispatch:

jobs:
  build_jag:
    strategy:
      matrix:
        container: [ ubuntu-latest, ubuntu-20.04 ]

    runs-on: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Build jag
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" = "release" ]]; then
            export JAG_BUILD_RELEASE=1
          fi
          GOOS=linux make JAG_BINARY=linux/jag jag
          GOOS=darwin make JAG_BINARY=macos/jag jag
          GOOS=windows make JAG_BINARY=windows/jag.exe jag
          GOOS=linux GOARCH=arm make JAG_BINARY=linux-arm/jag jag
          GOOS=linux GOARCH=arm64 make JAG_BINARY=linux-arm64/jag jag

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jag-build-${{ matrix.container }}
          path: |
            build/linux/
            build/linux-arm/
            build/linux-arm64/
            build/macos/
            build/windows/

      - name: Create archive Linux
        working-directory: ./build/linux
        run: |
          tar -czf jag.tgz jag

      - name: Create archive Linux ARM
        working-directory: ./build/linux-arm
        run: |
          tar -czf jag-arm.tgz jag

      - name: Create archive Linux ARM64
        working-directory: ./build/linux-arm64
        run: |
          tar -czf jag-arm64.tgz jag

      - name: Check version number
        if: github.event_name == 'release'
        working-directory: ./build/linux
        # Check that the version numbers match.
        # This is a sanity check to ensure that tools/prepare_release.sh was called.
        run: |
          ./jag --no-analytics version | head -n1 | grep --fixed-strings "${{ github.event.release.tag_name }}"

      - name: Upload jag Linux (tgz)
        if: (github.event_name == 'release') && (matrix.container == 'ubuntu-20.04')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/linux/jag.tgz
          tag: ${{ github.ref }}
          asset_name: jag_linux.tgz
          overwrite: true

      - name: Upload jag Linux ARM (tgz)
        if: (github.event_name == 'release') && (matrix.container == 'ubuntu-20.04')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/linux-arm/jag-arm.tgz
          tag: ${{ github.ref }}
          asset_name: jag_linux_arm.tgz
          overwrite: true

      - name: Upload jag Linux ARM64 (tgz)
        if: (github.event_name == 'release') && (matrix.container == 'ubuntu-20.04')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/linux-arm64/jag-arm64.tgz
          tag: ${{ github.ref }}
          asset_name: jag_linux_arm64.tgz
          overwrite: true

  sign_jag_windows:
    runs-on: windows-signing
    needs: [build_jag]
    if: github.event_name == 'release'
    steps:
      - name: Clean workspace
        run: |
          rm -Recurse -Force ${{ github.workspace }}\*

      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: jag-build-ubuntu-latest
          path: build

      - name: Sign jag
        working-directory: ./build/windows
        run: |
          signtool sign /debug /n "Toitware ApS" /t http://timestamp.digicert.com/ $PWD/jag.exe
          powershell Compress-Archive -Force jag.exe jag.zip

      - name: Version number
        id: version
        shell: powershell
        run: |
          $versionV = "${{ github.event.release.tag_name }}"
          $version = $versionV.Substring(1)
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Build installer
        run: |
          & tools\windows_installer\build.bat ${{ steps.version.outputs.version }} $PWD\build\windows\jag.exe $PWD\jag_installer_x64.exe
          signtool sign /debug /n "Toitware ApS" /t http://timestamp.digicert.com/ $PWD\jag_installer_x64.exe
          move $PWD\jag_installer_x64.exe build/windows/jag_installer_x64.exe
          cp build/windows/jag_installer_x64.exe build/windows/jag_installer.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jag-signed-windows
          path: build/windows

      - name: Upload jag Windows (zip)
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/windows/jag.zip
          tag: ${{ github.ref }}
          asset_name: jag_windows.zip
          overwrite: true

      - name: Upload jag Windows (installer_x64)
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/windows/jag_installer_x64.exe
          tag: ${{ github.ref }}
          asset_name: jag_installer_x64.exe
          overwrite: true

      - name: Upload jag Windows (installer)
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/windows/jag_installer.exe
          tag: ${{ github.ref }}
          asset_name: jag_installer.exe
          overwrite: true

  winget:
    name: Publish winget package
    runs-on: windows-latest
    needs: [sign_jag_windows]
    if: github.event_name == 'release' && !github.event.release.prerelease
    steps:
      - name: Version number
        id: version
        shell: powershell
        run: |
          $versionV = "${{ github.event.release.tag_name }}"
          $version = $versionV.Substring(1)
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Download winget binary
        run: |
          iwr https://aka.ms/wingetcreate/latest -OutFile wingetcreate.exe

      - name: Update manifest
        run: |
          .\wingetcreate.exe update Toit.Jaguar -s -v ${{ steps.version.outputs.version }} -u https://github.com/toitlang/jaguar/releases/download/${{ github.event.release.tag_name }}/jag_installer_x64.exe -t ${{ secrets.WINGET_JAGUAR_PAT }}

  sign_jag_macos:
    runs-on: macos-latest
    needs: [build_jag]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: jag-build-ubuntu-latest
          path: build

      - name: Setup binary rights
        run: |
          chmod +x build/macos/jag

      - name: Import signing keychain
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}

      - name: Install gon via HomeBrew for code signing and app notarization
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon

      - name: Sign the mac binaries with Gon
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
          make jag-macos-sign

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jag-macos
          path: build/macos/

      - name: Upload jag macOS (zip)
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/macos/jag.zip
          tag: ${{ github.ref }}
          asset_name: jag_macos.zip
          overwrite: true

      - name: Upload jag macOS (dmg)
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/macos/jag.dmg
          tag: ${{ github.ref }}
          asset_name: jag.dmg
          overwrite: true

  build_assets:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - uses: actions/checkout@v3

      - name: Download SDK
        run: |
          make download-sdk

      - name: Build assets
        run: |
          make assets
          tar -czf build/assets.tar.gz -C ./build -h assets

      - name: Upload assets
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/assets.tar.gz
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

  AUR:
    name: Update AUR package
    runs-on: ubuntu-latest
    needs: [build_jag]
    if: github.event_name == 'release' && !github.event.release.prerelease
    steps:
      - uses: actions/checkout@v3

      - name: Version number
        id: version
        shell: bash
        run: |
          VERSION_WITH_V="${{ github.event.release.tag_name }}"
          VERSION=${VERSION_WITH_V#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Ssh
        env:
          AUR_SSH_KEY: ${{ secrets.AUR_SSH_KEY }}
        run: |
          echo "$AUR_SSH_KEY" > ${{ github.workspace }}/aur_ssh_key
          chmod 600 ${{ github.workspace }}/aur_ssh_key

          mkdir -p $HOME/.ssh
          echo "Host aur.archlinux.org" >> $HOME/.ssh/config
          echo "  IdentityFile ${{ github.workspace }}/aur_ssh_key" >> $HOME/.ssh/config
          echo "  User aur" >> $HOME/.ssh/config

          ssh-keyscan -H aur.archlinux.org > $HOME/.ssh/known_hosts

      - name: Fetch AUR package
        run: |
          git clone ssh://aur@aur.archlinux.org/jaguar-bin.git

      - name: Git
        run: |
          cd jaguar-bin
          git config user.email "leon@toit.io"
          git config user.name "Leon Gungadin Mogensen"

      - name: Update AUR package
        uses: hapakaien/archlinux-package-action@v2
        with:
          path: jaguar-bin
          pkgver: ${{ steps.version.outputs.version }}
          updpkgsums: true
          srcinfo: true

      - name: Upload
        run: |
          cat ${{ github.workspace }}/jaguar-bin/PKGBUILD
          cat ${{ github.workspace }}/jaguar-bin/.SRCINFO

          cd ${{ github.workspace }}/jaguar-bin
          git commit -am "Update to version ${{ github.event.release.tag_name }}"
          git push origin master


