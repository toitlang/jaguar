name: Build

on:
  push:
  release:
    types: [published]

jobs:
  build_jag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build jag
        run: |
          GOOS=linux JAG_BINARY=linux/jag make jag
          GOOS=darwin JAG_BINARY=macos/jag make jag
          GOOS=windows JAG_BINARY=windows/jag.exe make jag
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: jag-build
          path: |
            build/linux/
            build/macos/
            build/windows/
      - name: Create archive Linux
        working-directory: ./build/linux
        run: |
          tar -czf jag.tgz jag
      - name: Upload jag Linux (tgz)
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/linux/jag.tgz
          tag: ${{ github.ref }}
          asset_name: jag_linux.tgz
          overwrite: true

  sign_jag_windows:
    runs-on: windows-signing
    needs: [build_jag]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: jag-build
          path: build
      - name: Sign jag
        working-directory: ./build/windows
        run: |
          signtool sign /debug /n "Toitware ApS" /t http://timestamp.digicert.com/ $PWD/jag.exe
          powershell Compress-Archive -Force jag.exe jag.zip
      - name: Version number
        id: version
        run: |
          $versionV = "${{ github.event.release.tag_name }}"
          $version = $versionV.Substring(1)
          echo "::set-output name=version::$version"
      - name: Build installer
        run: |
          & tools\windows_installer\build.bat ${{ steps.version.outputs.version }} $PWD\build\windows\jag.exe $PWD\jag_installer.exe
          signtool sign /debug /n "Toitware ApS" /t http://timestamp.digicert.com/ $PWD\jag_installer.exe
          move $PWD\jag_installer.exe build/windows/jag_installer.exe
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: jag-signed-windows
          path: build/windows
      - name: Upload jag Windows (zip)
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/windows/jag.zip
          tag: ${{ github.ref }}
          asset_name: jag_windows.zip
          overwrite: true
      - name: Upload jag Windows (installer)
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/windows/jag_installer.exe
          tag: ${{ github.ref }}
          asset_name: jag_installer.exe
          overwrite: true

  sign_jag_macos:
    runs-on: macos-latest
    needs: [build_jag]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: jag-build
          path: build

      - name: setup binary rights
        run: |
          chmod +x build/macos/jag

      - name: import signing keychain
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}

      - name: Install gon via HomeBrew for code signing and app notarization
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon

      - name: Sign the mac binaries with Gon
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
          make jag-macos-sign

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: jag-macos
          path: build/macos/

      - name: Upload jag macOS (zip)
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/macos/jag.zip
          tag: ${{ github.ref }}
          asset_name: jag_macos.zip
          overwrite: true

      - name: Upload jag macOS (dmg)
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/macos/jag.dmg
          tag: ${{ github.ref }}
          asset_name: jag.dmg
          overwrite: true

  build_toit_images:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          gcc --version
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: Install esp-idf tools
        run: make install-esp-idf
      - name: Build artifacts
        run: |
          . ./third_party/toit/third_party/esp-idf/export.sh
          make image
          tar -czf build/image.tar.gz -C ./build -h image
          cp ./build/image.snapshot ./build/jaguar.snapshot
      - name: Upload image artifacts
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/image.tar.gz
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      - name: Upload jaguar.snapshot artifact
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/jaguar.snapshot
          tag: ${{ github.ref }}
          overwrite: true
